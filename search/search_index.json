{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"about/","title":"About this site and the authors","text":""},{"location":"about/#about-this-site","title":"About this site","text":"<p>TBD</p>"},{"location":"about/#agostino-de-marco","title":"Agostino De Marco","text":"<p>Prof. Agostino De Marco (ADM) is an expert in the field of flight dynamics and control. He took his MSc in aeronautical engineering in 1996 at the University of Naples Federico II. From the same university, he holds since 2001 a PhD in naval engineering. CV here</p> <p>ADM's main research areas are: aircraft flight mechanics, flight dynamics &amp; control, flight simulation, and flight testing. Due to his academic background and more than 20 year involvement in various projects at the University of Naples Federico II, ADM has accumulated a significant expertise in applied aerodynamics and hydrodynamics, computational fluid dynamics (CFD, with applications to both aeronautical and naval engineering problems), and scientific computing in general.</p> <p>ADM is also a proficient computer programmer and an expert software engineer. He has developed a professional level knowledge of the following related fields: programming languages (Java, Python, Matlab, C++, C, Fortran), software engineering, object-oriented design and functional programming, distributed revision control and source code management (SCM) platforms (such as GitHub and Bitbucket), CAD and solid modelling, grid generation.</p> <p>ADM is one of the maintainers and developers of JSBSim, an open-source, multi-platform, general purpose, object-oriented Flight Dynamics Model (FDM) written in C++.</p>"},{"location":"about/#author-2","title":"Author 2","text":"<p>Angelo Lerro</p> <p>TBD</p>"},{"location":"Chapter_00/introduction/","title":"Introduction to the Flight Dynamics Book companion website","text":"<p>Welcome to the companion website for the Flight Dynamics Book!</p> <p>Here, you'll find a collection of materials accumulated since 2011, primarily by the authors themselves. This website serves as an extension of the Flight Dynamics Book, providing additional resources, including complementary lecture notes, case studies, simulations, and multimedia content. The collaborative effort of students has played a significant role in shaping this platform. In fact, several exercises were revised with the help of numerous students who have actively participated in the Flight Dynamics and Simulation course at the University of Naples Federico II, contributing to the rich collection of resources available here.</p>"},{"location":"Chapter_00/introduction/#key-features","title":"Key Features","text":"<p>The key features of this website are the following:</p> <ol> <li> <p>Comprehensive Resources: Access a variety of materials that complement the concepts covered in the Flight Dynamics Book.</p> </li> <li> <p>Interactive Learning: Engage with simulations, quizzes, and practical exercises to reinforce theoretical principles.</p> </li> <li> <p>Updates and Additions: Stay informed about the latest content updates and additional chapters related to flight dynamics.</p> </li> </ol> <p>Whether you're studying aircraft dynamics or exploring the world of flight, this platform is here to support your learning journey. Feel free to explore the resources available and make the most of your educational experience.</p>"},{"location":"Chapter_00/introduction/#technology","title":"Technology","text":"<p>The content on this platform is made accessible through a transparent and collaborative approach. Utilizing the GitHub repository framework, we've implemented a user-friendly GitHub Pages website that hosts static content rendered via MkDocs. This choice of technology ensures a seamless and easily navigable experience for users.</p> <p>One notable feature is the integration of Jupyter notebooks into the website. Several pages are rendered directly from Jupyter notebooks, adding an interactive dimension to the learning materials. These notebooks are designed to run the Jupyter MATLAB kernel, providing a practical and hands-on environment for users to engage with MATLAB-based content.</p> <p>The use of the above mentioned technologies facilitates the organization and version control of the content but also allows for contributions and feedback from a wider community. This collaborative environment reflects the shared efforts of the book authors and several other contributors over the years.</p>"},{"location":"Chapter_00/introduction/#navigate-the-website","title":"Navigate the website","text":"<p>Navigating through the material content on this website is a straightforward process, designed to provide you with easy access to the available resources. Simply use the menus and the table of contents to explore the content at your own pace.</p> <ul> <li> <p>Menus: The navigation menus help you quickly find the sections you're interested in. Whether you're looking for complementary lecture notes, case studies, simulations, or other resources, the menus provide a convenient way to jump to a specific subject. </p> </li> <li> <p>Search: Feel free to use the search feature to look for keywords.</p> </li> </ul>"},{"location":"Chapter_00/introduction/#navigate-the-raw-repository","title":"Navigate the raw repository","text":"<p>All materials, including the content on this website, are sourced from a GitHub repository, accessible at the following address: https://github.com/agodemar/Flight_Dynamics_Book_Companion. Within the repository's <code>docs</code> subfolder available here, you'll find notebooks (<code>*.ipynb</code>), MATLAB M-files (<code>*.m</code>), data files (<code>*.mat</code>), Simulink models (<code>*.slx</code>), and various auxiliary files in different formats. The <code>docs</code> folder is organized into subdirectories corresponding to the chapters of the book, facilitating easy navigation according to the book's structure.</p>"},{"location":"Chapter_01/00_aircraft_motion_in_space/","title":"Aircraft CG motion in the Earth frame \\(\\mathcal{F}_\\mathrm{E}\\)","text":"<p>Modeling the kinematics of a rigid aircraft in three-dimensional space involves describing the motion of the vehicle's center of gravity (CG) and its orientation as it moves through the air. Kinematics is the study of motion without considering the forces causing the motion. Here's an overview of how the kinematics of a rigid aircraft can be modeled in three-dimensional space.</p>"},{"location":"Chapter_01/00_aircraft_motion_in_space/#coordinate-systems","title":"Coordinate Systems","text":"<p>Within the flat-Earth approximation, an Earth frame \\(\\mathcal{F}_\\mathrm{E}\\) can be chosen as a coordinate system to represent the three-dimensional space. Moreover, a local body-fixed system \\(\\mathcal{F}_\\mathrm{B}\\) attached to the aircraft is assumed to describe the aircraft motion as a rigid body.</p>"},{"location":"Chapter_01/00_aircraft_motion_in_space/#aircraft-attitude","title":"Aircraft attitude","text":""},{"location":"Chapter_01/00_aircraft_motion_in_space/#euler-angles","title":"Euler angles","text":"<p>Aircraft orientation in space is typically modeled using an ordered triplet of angles: heading, elevation, and roll. Thesr are also known as Euler angles. </p> <ul> <li>Heading \\(\\psi\\) is the angle between the aircraft's longitudinal axis (front to back) and the North, measured in the horizontal plane. It represents the aircraft's left or right direction.</li> <li>Elevation \\(\\theta\\) is the angle between the aircraft's longitudinal axis and the horizontal plane. It represents the aircraft's up or down direction.</li> <li>Roll \\(\\phi\\) is the rotation around the aircraft's longitudinal axis. It represents the aircraft's tilt to the left or right.</li> </ul> <p>These angles are used to define the aircraft's orientation in a 3D space. They are crucial for navigation, control systems, and flight dynamics. </p> <p>In addition to Euler angles, there are other methods to represent orientation such as quaternions and direction cosine matrices. These methods can help to avoid certain issues like gimbal lock that can occur with Euler angles. </p> <p>It's important to note that the modeling of aircraft orientation is a complex topic that involves various aspects of physics, mathematics, and engineering.</p>"},{"location":"Chapter_01/00_aircraft_motion_in_space/#quaternion-based-orientation-modelling","title":"Quaternion-based orientation modelling","text":"<p>Quaternions are an alternative and compact way to represent rotations in three-dimensional space. A quaternion is a hypercomplex number of the form \\(q=q_0 + q_x \\boldsymbol{i} + q_y \\boldsymbol{j} + q_z \\boldsymbol{k}\\), where \\(\\boldsymbol{i}\\), \\(\\boldsymbol{j}\\), and \\(\\boldsymbol{k}\\) are imaginary units. The quaternion is typically normalized to have a unit magnitude.</p> <p>Quaternions have certain advantages over Euler angles, such as avoiding gimbal lock and providing smooth interpolation between orientations. Both Euler angles and quaternions are widely used in aerospace engineering and computer graphics for representing the orientation of rigid bodies, including aircraft, in three-dimensional space. The choice between them depends on the specific requirements of the application.</p>"},{"location":"Chapter_01/example_01_aircraft_orientation/","title":"Loading the aircraft shape and placing it into the 3D scene","text":"In\u00a0[1]: Copied! <pre>clearvars; close all; clc\n\n% Make the functions in this work directory available to matlab\ncurrent_dir = pwd;\naddpath(genpath(current_dir));\n\n% Set all interpreters to latex\nlist_factory = fieldnames(get(groot,'factory'));\nindex_interpreter = find(contains(list_factory,'Interpreter'));\nfor i = 1:length(index_interpreter)\n    default_name = strrep(list_factory{index_interpreter(i)},'factory','default');\n    set(groot, default_name,'latex');\nend\n</pre> clearvars; close all; clc  % Make the functions in this work directory available to matlab current_dir = pwd; addpath(genpath(current_dir));  % Set all interpreters to latex list_factory = fieldnames(get(groot,'factory')); index_interpreter = find(contains(list_factory,'Interpreter')); for i = 1:length(index_interpreter)     default_name = strrep(list_factory{index_interpreter(i)},'factory','default');     set(groot, default_name,'latex'); end In\u00a0[2]: Copied! <pre>% Use this factor to scale the shape\nshapeScaleFactor = 1.0;\n\n% Load shape from .stl file\n[V, F, C] = loadAircraftSTL('aircraft_pa24-250.stl', shapeScaleFactor);\n</pre> % Use this factor to scale the shape shapeScaleFactor = 1.0;  % Load shape from .stl file [V, F, C] = loadAircraftSTL('aircraft_pa24-250.stl', shapeScaleFactor); Out[2]: <pre>Reading vertex num: 250.\nReading vertex num: 500.\nReading vertex num: 750.\nReading vertex num: 1000.\nReading vertex num: 1250.\nReading vertex num: 1500.\nReading vertex num: 1750.\nReading vertex num: 2000.\nReading vertex num: 2250.\nReading vertex num: 2500.\nReading vertex num: 2750.\nReading vertex num: 3000.\nReading vertex num: 3250.\nReading vertex num: 3500.\nReading vertex num: 3750.\nReading vertex num: 4000.\nReading vertex num: 4250.\nReading vertex num: 4500.\nReading vertex num: 4750.\nReading vertex num: 5000.\nReading vertex num: 5250.\nReading vertex num: 5500.\nReading vertex num: 5750.\nReading vertex num: 6000.\nReading vertex num: 6250.\nReading vertex num: 6500.\nReading vertex num: 6750.\nReading vertex num: 7000.\nReading vertex num: 7250.\nReading vertex num: 7500.\nReading vertex num: 7750.\nReading vertex num: 8000.\nReading vertex num: 8250.\nReading vertex num: 8500.\nReading vertex num: 8750.\nReading vertex num: 9000.\nReading vertex num: 9250.\nReading vertex num: 9500.\nReading vertex num: 9750.\nReading vertex num: 10000.\nReading vertex num: 10250.\nReading vertex num: 10500.\nReading vertex num: 10750.\nReading vertex num: 11000.\nReading vertex num: 11250.\nReading vertex num: 11500.\nReading vertex num: 11750.\nReading vertex num: 12000.\nReading vertex num: 12250.</pre> In\u00a0[3]: Copied! <pre>% Create shape struct\nshape.V = V; shape.F = F; shape.C = C;\n\n% Display shape\nfprintf('Displaying aircraft shape struct...\\n');\n</pre>  % Create shape struct shape.V = V; shape.F = F; shape.C = C;  % Display shape fprintf('Displaying aircraft shape struct...\\n'); Out[3]: <pre>Displaying aircraft shape struct...</pre> In\u00a0[4]: Copied! <pre>shape\n</pre> shape Out[4]: <pre>shape = \n    V: [12495x3 double]\n    F: [4165x3 double]\n    C: [12495x1 double]</pre> In\u00a0[5]: Copied! <pre>save('aircraft_pa24-250.mat', 'shape');\n</pre> save('aircraft_pa24-250.mat', 'shape'); In\u00a0[6]: Copied! <pre>%% Setup the figure/scene\nfigure(1);\n\nhold on;\n\n% Trick to have Ze pointing downward and correct visualization\nset(gca,'XDir','reverse');\nset(gca,'ZDir','reverse');\n\nlight('Position',[1 0 -2],'Style','local');\ntheView = [-125 30];\nview(theView);\n\n% Axis ranges\nxMax = 1.8*max(abs(shape.V(:,1)));\nyMax = 1.8*max(abs(shape.V(:,2)));\nzMax = 0.5*xMax;\n\n% XB-axis\nquiver3( 0,0,0, xMax,0,0, 'r', 'linewidth',2.5 );\n\n% YB-axis\nquiver3( 0,0,0, 0,yMax,0, 'g', 'linewidth',2.5 );\n\n% ZB-axis\nquiver3( 0,0,0, 0,0,zMax, 'b', 'linewidth',2.5 ...\n);\n\nxlabel(' $x_B$ '); ylabel(' $y_B$ '); zlabel(' $z_B$ ');\ngrid on;\naxis equal;\nhold off\n</pre> %% Setup the figure/scene figure(1);  hold on;  % Trick to have Ze pointing downward and correct visualization set(gca,'XDir','reverse'); set(gca,'ZDir','reverse');  light('Position',[1 0 -2],'Style','local'); theView = [-125 30]; view(theView);  % Axis ranges xMax = 1.8*max(abs(shape.V(:,1))); yMax = 1.8*max(abs(shape.V(:,2))); zMax = 0.5*xMax;  % XB-axis quiver3( 0,0,0, xMax,0,0, 'r', 'linewidth',2.5 );  % YB-axis quiver3( 0,0,0, 0,yMax,0, 'g', 'linewidth',2.5 );  % ZB-axis quiver3( 0,0,0, 0,0,zMax, 'b', 'linewidth',2.5 ... );  xlabel(' $x_B$ '); ylabel(' $y_B$ '); zlabel(' $z_B$ '); grid on; axis equal; hold off Out[6]: In\u00a0[7]: Copied! <pre>figure(2);\n\nhold on;\n\n% Trick to have Ze pointing downward and correct visualization\nset(gca,'XDir','reverse');\nset(gca,'ZDir','reverse');\n\nlight('Position',[1 0 -2],'Style','local');\ntheView = [-125 30];\nview(theView);\n\np = patch('faces', shape.F, 'vertices' ,shape.V);\nset(p, 'facec', [1 0 0]);\nset(p, 'EdgeColor','none');\nlighting phong;\naxis equal;\ngrid on;\n\n% Axis ranges\nxMax = 1.8*max(abs(shape.V(:,1)));\nyMax = 1.8*max(abs(shape.V(:,2)));\nzMax = 0.5*xMax;\n\n% XB-axis\nquiver3( 0,0,0, xMax,0,0, 'r','linewidth',2.5)\n% YB-axis\nquiver3( 0,0,0, 0,yMax,0, 'g','linewidth',2.5)\n% ZB-axis\nquiver3( 0,0,0, 0,0,zMax, 'b','linewidth',2.5)\n\nxlabel(' $x_B$ '); ylabel(' $y_B$ '); zlabel(' $z_B$ ');\n\nhold off\n</pre> figure(2);  hold on;  % Trick to have Ze pointing downward and correct visualization set(gca,'XDir','reverse'); set(gca,'ZDir','reverse');  light('Position',[1 0 -2],'Style','local'); theView = [-125 30]; view(theView);  p = patch('faces', shape.F, 'vertices' ,shape.V); set(p, 'facec', [1 0 0]); set(p, 'EdgeColor','none'); lighting phong; axis equal; grid on;  % Axis ranges xMax = 1.8*max(abs(shape.V(:,1))); yMax = 1.8*max(abs(shape.V(:,2))); zMax = 0.5*xMax;  % XB-axis quiver3( 0,0,0, xMax,0,0, 'r','linewidth',2.5) % YB-axis quiver3( 0,0,0, 0,yMax,0, 'g','linewidth',2.5) % ZB-axis quiver3( 0,0,0, 0,0,zMax, 'b','linewidth',2.5)  xlabel(' $x_B$ '); ylabel(' $y_B$ '); zlabel(' $z_B$ ');  hold off Out[7]:"},{"location":"Chapter_01/example_01_aircraft_orientation/#loading-the-aircraft-shape-and-placing-it-into-the-3d-scene","title":"Loading the aircraft shape and placing it into the 3D scene\u00b6","text":"<p>The plan:</p> <ul> <li>Use MATLAB to read a geometrical representation of aircraft external surface in STL (StereoLithography) format.STL is a file format commonly used in 3D printing and computer-aided  design (CAD) software. It represents the surface geometry of a 3D object using triangular facets. Each facet is defined by its normal vector and three vertices in 3D space. STL files can be used to store and exchange 3D models between various applications.</li> <li>Use the provided function loadAircraftSTL that returns a triplet of matrices containing infos about shape's vertices, facets, and facets interconnections.</li> <li>Save the shape infos in a .mat file for later use.</li> <li>The geometry is defined in such a way that the aircraft CG is located at the origin $O_{{\\mathrm{E}}}$ of the Earth frame ${\\mathcal{F}}_{{\\mathrm{E}}}$ , and with body axes aligned with Earth axes ( $\\psi =\\theta =\\phi =0$ ).</li> <li>Plot the faceted shape of the aircraft in a 3D space with the function patch and display the reference frame ${\\mathcal{F}}_{{\\mathrm{B}}}$ .</li> </ul>"},{"location":"Chapter_01/example_01_aircraft_orientation/#initialize-matlab","title":"Initialize MATLAB\u00b6","text":""},{"location":"Chapter_01/example_01_aircraft_orientation/#load-a-3d-model-with-loadaircraftstl","title":"Load a 3D model with loadAircraftSTL\u00b6","text":""},{"location":"Chapter_01/example_01_aircraft_orientation/#save-a-variable-shape-as-a-matlab-struct-in-a-mat-file","title":"Save a variable shape as a MATLAB struct in a .mat file\u00b6","text":""},{"location":"Chapter_01/example_01_aircraft_orientation/#display-the-body-axes","title":"Display the body axes\u00b6","text":""},{"location":"Chapter_01/example_01_aircraft_orientation/#display-the-body-axes-and-the-aircraft-external-shape","title":"Display the body axes and the aircraft external shape\u00b6","text":""},{"location":"Chapter_01/example_02_aircraft_orientation/","title":"Placing and orienting the aircraft orientation shape in the three-dimensional space","text":"In\u00a0[1]: Copied! <pre>clearvars; close all; clc\n\n% Make the functions in this work directory available to matlab\ncurrent_dir = pwd;\naddpath(genpath(current_dir));\n\n% Set all interpreters to latex\nlist_factory = fieldnames(get(groot,'factory'));\nindex_interpreter = find(contains(list_factory,'Interpreter'));\nfor i = 1:length(index_interpreter)\n    default_name = strrep(list_factory{index_interpreter(i)},'factory','default');\n    set(groot, default_name,'latex');\nend\n</pre> clearvars; close all; clc  % Make the functions in this work directory available to matlab current_dir = pwd; addpath(genpath(current_dir));  % Set all interpreters to latex list_factory = fieldnames(get(groot,'factory')); index_interpreter = find(contains(list_factory,'Interpreter')); for i = 1:length(index_interpreter)     default_name = strrep(list_factory{index_interpreter(i)},'factory','default');     set(groot, default_name,'latex'); end In\u00a0[2]: Copied! <pre>% use this factor to scale the shape\nshapeScaleFactor = 1.0;\n\n% Load shape from .mat file\nshape = loadAircraftMAT('aircraft_pa24-250.mat', shapeScaleFactor);\n\n% Display shape\nfprintf('Displaying aircraft shape struct...\\n');\n</pre> % use this factor to scale the shape shapeScaleFactor = 1.0;  % Load shape from .mat file shape = loadAircraftMAT('aircraft_pa24-250.mat', shapeScaleFactor);  % Display shape fprintf('Displaying aircraft shape struct...\\n'); Out[2]: <pre>Displaying aircraft shape struct...</pre> In\u00a0[3]: Copied! <pre>shape\n</pre> shape Out[3]: <pre>shape = \n    V: [12495x3 double]\n    F: [4165x3 double]\n    C: [12495x1 double]</pre> In\u00a0[4]: Copied! <pre>figure(1);\n\ngrid on;\nhold on;\nlight('Position',[1 0 -2],'Style','local');\n\n% Trick to have Ze pointing downward and correct visualization\nset(gca,'XDir','reverse');\nset(gca,'ZDir','reverse');h_fig1 = figure(1);\n\n%% Load aircraft shape\nshapeScaleFactor = 1.0;\nshape = loadAircraftMAT('aircraft_pa24-250.mat', shapeScaleFactor);\n\n%% Set the aircraft in place\n% Posision in Earth axes\nvXYZe = [2,2,-2];\n% psi, theta, phi -&gt; 'ZYX'\nvEulerAngles = convang([20,10,0],'deg','rad');\n% Observer point-of-view\ntheView = [105 15];\n% body axes settings\nbodyAxesOptions.show = true;\nbodyAxesOptions.magX = 2.0;\nbodyAxesOptions.magY = 2.0;\nbodyAxesOptions.magZ = 2.0;\nbodyAxesOptions.lineWidth = 2.5;\nplotBodyE(h_fig1, shape, vXYZe, vEulerAngles, bodyAxesOptions, theView);\n\n%% Plot Earth axes\nhold on;\nxMax = max([abs(vXYZe(1)),5]);\nyMax = max([abs(vXYZe(2)),5]);\nzMax = 0.3*xMax; % max([abs(max(vXYZe(1))),0.18*xMax]);\nvXYZ0 = [0,0,0];\nvExtent = [xMax,yMax,zMax];\nplotEarthAxes(h_fig1, vXYZ0, vExtent);\n\n%% draw CoG coordinate helper lines\nhold on;\nhelperLinesOptions.lineColor = 'k';\nhelperLinesOptions.lineWidth = 1.5;\nhelperLinesOptions.lineStyle = ':';\nplotPoint3DHelperLines(h_fig1, vXYZe, helperLinesOptions);\n\nxlabel(' $x_E$ '); ylabel(' $y_E$ '); zlabel(' $z_E$ ');\n</pre> figure(1);  grid on; hold on; light('Position',[1 0 -2],'Style','local');  % Trick to have Ze pointing downward and correct visualization set(gca,'XDir','reverse'); set(gca,'ZDir','reverse');h_fig1 = figure(1);  %% Load aircraft shape shapeScaleFactor = 1.0; shape = loadAircraftMAT('aircraft_pa24-250.mat', shapeScaleFactor);  %% Set the aircraft in place % Posision in Earth axes vXYZe = [2,2,-2]; % psi, theta, phi -&gt; 'ZYX' vEulerAngles = convang([20,10,0],'deg','rad'); % Observer point-of-view theView = [105 15]; % body axes settings bodyAxesOptions.show = true; bodyAxesOptions.magX = 2.0; bodyAxesOptions.magY = 2.0; bodyAxesOptions.magZ = 2.0; bodyAxesOptions.lineWidth = 2.5; plotBodyE(h_fig1, shape, vXYZe, vEulerAngles, bodyAxesOptions, theView);  %% Plot Earth axes hold on; xMax = max([abs(vXYZe(1)),5]); yMax = max([abs(vXYZe(2)),5]); zMax = 0.3*xMax; % max([abs(max(vXYZe(1))),0.18*xMax]); vXYZ0 = [0,0,0]; vExtent = [xMax,yMax,zMax]; plotEarthAxes(h_fig1, vXYZ0, vExtent);  %% draw CoG coordinate helper lines hold on; helperLinesOptions.lineColor = 'k'; helperLinesOptions.lineWidth = 1.5; helperLinesOptions.lineStyle = ':'; plotPoint3DHelperLines(h_fig1, vXYZe, helperLinesOptions);  xlabel(' $x_E$ '); ylabel(' $y_E$ '); zlabel(' $z_E$ '); Out[4]:"},{"location":"Chapter_01/example_02_aircraft_orientation/#placing-and-orienting-the-aircraft-orientation-shape-in-the-three-dimensional-space","title":"Placing and orienting the aircraft orientation shape in the three-dimensional space\u00b6","text":"<p>The plan:</p> <ul> <li>Use MATLAB to read a struct variable representing the aircraft external surface.Use the provided function loadAircraftMAT.</li> <li>Plot the faceted shape of the aircraft in a 3D space with the function patch and display the two reference frames ${\\mathcal{F}}_{{\\mathrm{E}}}$ and ${\\mathcal{F}}_{{\\mathrm{B}}}$ .</li> </ul>"},{"location":"Chapter_01/example_02_aircraft_orientation/#initialize-matlab","title":"Initialize MATLAB\u00b6","text":""},{"location":"Chapter_01/example_02_aircraft_orientation/#load-a-3d-model","title":"Load a 3D model\u00b6","text":""},{"location":"Chapter_01/example_02_aircraft_orientation/#display-the-shape-object-with-body-axes","title":"Display the shape object with body axes\u00b6","text":""},{"location":"Chapter_01/example_03_aircraft_orientation_weight_force/","title":"Representing the aircraft solid and its weight force vector","text":"In\u00a0[1]: Copied! <pre>clearvars; close all; clc\n\n% make the functions in this work directory available to matlab\n% current_dir = pwd;\n% addpath(genpath(current_dir));\n\n% Set all interpreters to latex\nlist_factory = fieldnames(get(groot,'factory'));\nindex_interpreter = find(contains(list_factory,'Interpreter'));\nfor i = 1:length(index_interpreter)\n    default_name = strrep(list_factory{index_interpreter(i)},'factory','default');\n    set(groot, default_name,'latex');\nend\n</pre> clearvars; close all; clc  % make the functions in this work directory available to matlab % current_dir = pwd; % addpath(genpath(current_dir));  % Set all interpreters to latex list_factory = fieldnames(get(groot,'factory')); index_interpreter = find(contains(list_factory,'Interpreter')); for i = 1:length(index_interpreter)     default_name = strrep(list_factory{index_interpreter(i)},'factory','default');     set(groot, default_name,'latex'); end In\u00a0[2]: Copied! <pre>%% Load aircraft shape\nshapeScaleFactor = 1.0;\nshape = loadAircraftMAT('aircraft_pa24-250.mat', shapeScaleFactor);\n</pre> %% Load aircraft shape shapeScaleFactor = 1.0; shape = loadAircraftMAT('aircraft_pa24-250.mat', shapeScaleFactor); In\u00a0[3]: Copied! <pre>%% Setup the figure/scene\nh_fig1 = figure(1);\n\ngrid on;\nhold on;\nlight('Position',[1 0 -2],'Style','local');\n% Trick to have Ze pointing downward and correct visualization\nset(gca,'XDir','reverse');\nset(gca,'ZDir','reverse');\n\n%% Set the aircraft in place\n% Posision in Earth axes\nvXYZe = [1,1,-2];\n% psi, theta, phi -&gt; 'ZYX'\nvEulerAngles = convang([20,10,0],'deg','rad');\n% Observer point-of-view\ntheView = [105 15];\n% body axes settings\nbodyAxesOptions.show = true;\nbodyAxesOptions.magX = 1.5;\nbodyAxesOptions.magY = 2.0;\nbodyAxesOptions.magZ = 2.0;\nbodyAxesOptions.lineWidth = 2.5;\nplotBodyE(h_fig1, shape, vXYZe, vEulerAngles, bodyAxesOptions, theView);\n\n%% Plot Earth axes\nhold on;\nxMax = 2; % max([abs(vXYZe(1)),5]);\nyMax = 2; % max([abs(vXYZe(2)),5]);\nzMax = 0.2*xMax; % max([abs(max(vXYZe(1))),0.18*xMax]);\nvXYZ0 = [0,0,0];\nvExtent = [xMax,yMax,zMax];\nplotEarthAxes(h_fig1, vXYZ0, vExtent);\n\n%% draw CoG coordinate helper lines\nhold on;\nhelperLinesOptions.lineColor = 'k';\nhelperLinesOptions.lineWidth = 1.5;\nhelperLinesOptions.lineStyle = ':';\nplotPoint3DHelperLines(h_fig1, vXYZe, helperLinesOptions);\n\n%% Mass data\nmass = 1200.0; % kg\ng = 9.81; % m/s^2\n\n%% Euler angles\npsi   = vEulerAngles(1);\ntheta = vEulerAngles(2);\nphi   = vEulerAngles(3);\n\n%% DCM\n% Transf. matrix from Earth- to body-axes\nTbe = angle2dcm(psi, theta, phi, 'ZYX')\n</pre> %% Setup the figure/scene h_fig1 = figure(1);  grid on; hold on; light('Position',[1 0 -2],'Style','local'); % Trick to have Ze pointing downward and correct visualization set(gca,'XDir','reverse'); set(gca,'ZDir','reverse');  %% Set the aircraft in place % Posision in Earth axes vXYZe = [1,1,-2]; % psi, theta, phi -&gt; 'ZYX' vEulerAngles = convang([20,10,0],'deg','rad'); % Observer point-of-view theView = [105 15]; % body axes settings bodyAxesOptions.show = true; bodyAxesOptions.magX = 1.5; bodyAxesOptions.magY = 2.0; bodyAxesOptions.magZ = 2.0; bodyAxesOptions.lineWidth = 2.5; plotBodyE(h_fig1, shape, vXYZe, vEulerAngles, bodyAxesOptions, theView);  %% Plot Earth axes hold on; xMax = 2; % max([abs(vXYZe(1)),5]); yMax = 2; % max([abs(vXYZe(2)),5]); zMax = 0.2*xMax; % max([abs(max(vXYZe(1))),0.18*xMax]); vXYZ0 = [0,0,0]; vExtent = [xMax,yMax,zMax]; plotEarthAxes(h_fig1, vXYZ0, vExtent);  %% draw CoG coordinate helper lines hold on; helperLinesOptions.lineColor = 'k'; helperLinesOptions.lineWidth = 1.5; helperLinesOptions.lineStyle = ':'; plotPoint3DHelperLines(h_fig1, vXYZe, helperLinesOptions);  %% Mass data mass = 1200.0; % kg g = 9.81; % m/s^2  %% Euler angles psi   = vEulerAngles(1); theta = vEulerAngles(2); phi   = vEulerAngles(3);  %% DCM % Transf. matrix from Earth- to body-axes Tbe = angle2dcm(psi, theta, phi, 'ZYX') Out[3]: <pre>Tbe = 3x3    \n    0.9254    0.3368   -0.1736\n   -0.3420    0.9397         0\n    0.1632    0.0594    0.9848</pre> In\u00a0[4]: Copied! <pre>Teb = Tbe';\nvWeight_E = [0;0;mass*g] % N\n</pre> Teb = Tbe'; vWeight_E = [0;0;mass*g] % N Out[4]: <pre>vWeight_E = 3x1    \n           0\n           0\n       11772</pre> In\u00a0[5]: Copied! <pre>vWeight_B = Tbe*vWeight_E\n</pre> vWeight_B = Tbe*vWeight_E Out[5]: <pre>vWeight_B = 3x1    \n1.0e+04 *\n   -0.2044\n         0\n1.1593</pre> In\u00a0[6]: Copied! <pre>%% Draw Weight pointing downward\nhold on\nscale_weight = 0.0001;\nweightVecMag = scale_weight*mass*g;\nqW = quiver3( ...\n    vXYZe(1),vXYZe(2),vXYZe(3), ...\n    0, 0, weightVecMag, ...\n    'AutoScale', 'off', 'Color', [1 0 1], ... % weight vector in magenta\n    'LineWidth', 2.5 ...\n    );\n\ntext(vXYZe(1),vXYZe(2)-0.2,vXYZe(3)+1, ...\n    ' !!!EQ_4!!! ' ...\n    )\n\n%% Vector W_XB * i_B\n% application point along z_B\npWZB_B = scale_weight.*[0;0;vWeight_B(3)];\npWZB_E = vXYZe' + Teb*pWZB_B;\n% Vector W_XB * i_B (body-components)\nvWeight_XB_B = scale_weight.*[vWeight_B(1);0;0];\n% Vector W_XB * i_B (Earth-components)\nvWeight_XB_E = Teb*vWeight_XB_B;\nquiver3( ...\n    pWZB_E(1), pWZB_E(2), pWZB_E(3), ...\n    vWeight_XB_E(1), vWeight_XB_E(2), vWeight_XB_E(3), ...\n    'AutoScale', 'off', 'Color', [0 1 1], ... % vector W_XB*i_B in cyan\n    'LineWidth', 2.0, ...\n    'MaxHeadSize', 4.0 ...\n    );\nxlabel(' !!!EQ_5!!! '); ylabel(' !!!EQ_6!!! '); zlabel(' !!!EQ_7!!! ');\n</pre>  %% Draw Weight pointing downward hold on scale_weight = 0.0001; weightVecMag = scale_weight*mass*g; qW = quiver3( ...     vXYZe(1),vXYZe(2),vXYZe(3), ...     0, 0, weightVecMag, ...     'AutoScale', 'off', 'Color', [1 0 1], ... % weight vector in magenta     'LineWidth', 2.5 ...     );  text(vXYZe(1),vXYZe(2)-0.2,vXYZe(3)+1, ...     ' !!!EQ_4!!! ' ...     )  %% Vector W_XB * i_B % application point along z_B pWZB_B = scale_weight.*[0;0;vWeight_B(3)]; pWZB_E = vXYZe' + Teb*pWZB_B; % Vector W_XB * i_B (body-components) vWeight_XB_B = scale_weight.*[vWeight_B(1);0;0]; % Vector W_XB * i_B (Earth-components) vWeight_XB_E = Teb*vWeight_XB_B; quiver3( ...     pWZB_E(1), pWZB_E(2), pWZB_E(3), ...     vWeight_XB_E(1), vWeight_XB_E(2), vWeight_XB_E(3), ...     'AutoScale', 'off', 'Color', [0 1 1], ... % vector W_XB*i_B in cyan     'LineWidth', 2.0, ...     'MaxHeadSize', 4.0 ...     ); xlabel(' !!!EQ_5!!! '); ylabel(' !!!EQ_6!!! '); zlabel(' !!!EQ_7!!! '); Out[6]:"},{"location":"Chapter_01/example_03_aircraft_orientation_weight_force/#representing-the-aircraft-solid-and-its-weight-force-vector","title":"Representing the aircraft solid and its weight force vector\u00b6","text":"<p>The plan:</p> <ul> <li>Read a struct variable representing the aircraft external surface.Use the provided function loadAircraftMAT.</li> <li>Plot the faceted shape of the aircraft in a 3D space with the function patch and display the two reference frames ${\\mathcal{F}}_{{\\mathrm{E}}}$ and ${\\mathcal{F}}_{{\\mathrm{B}}}$ .</li> <li>Plot the weight force vector and its components along the body axes, ${\\mathcal{F}}_{{\\mathrm{B}}}$ .</li> </ul>"},{"location":"Chapter_01/example_03_aircraft_orientation_weight_force/#initialize-matlab","title":"Initialize MATLAB\u00b6","text":""},{"location":"Chapter_01/example_03_aircraft_orientation_weight_force/#load-the-3d-model","title":"Load the 3D model\u00b6","text":""},{"location":"Chapter_01/example_03_aircraft_orientation_weight_force/#draw-the-shapes","title":"Draw the shapes\u00b6","text":"<p>See:</p> <ul> <li>function plotBodyE.m</li> <li>function plotEarthAxes.m</li> <li>function plotPoint3DHelperLines.m</li> </ul>"},{"location":"Chapter_02/00_aircraft_aerodynamic_engine_models/","title":"Aircraft aerodynamic and engine models","text":"<p>TBD</p>"},{"location":"Chapter_02/01_pippo/","title":"Pippo","text":"In\u00a0[2]: Copied! <pre>pwd\n</pre> pwd Out[2]: <pre>ans = 'C:\\Users\\agode\\Flight_Dynamics_Book_Companion'</pre> In\u00a0[6]: Copied! <pre>A = rand(4,3);\n% plot a 3D bar graph\nbar3(A);\n</pre> A = rand(4,3); % plot a 3D bar graph bar3(A); Out[6]:"},{"location":"Chapter_02/01_pippo/#pippo","title":"Pippo\u00b6","text":""},{"location":"Chapter_02/01_pippo/#pippetto","title":"Pippetto\u00b6","text":""},{"location":"Chapter_02/01_pippo/#pluto","title":"Pluto\u00b6","text":""},{"location":"Chapter_02/02_nicola/","title":"Nicola","text":"In\u00a0[1]: Copied! <pre>pwd\n</pre> pwd Out[1]: <pre>ans = 'C:\\Users\\agode\\Flight_Dynamics_Book_Companion'</pre> In\u00a0[3]: Copied! <pre>rand(2, 6)\n</pre> rand(2, 6) Out[3]: <pre>ans = 2x6 double\n    0.1291    0.8793    0.4955    0.5736    0.1518    0.1908\n    0.0385    0.2191    0.1059    0.7614    0.0088    0.8557\n</pre>"},{"location":"Chapter_02/02_nicola/#nicola","title":"Nicola\u00b6","text":""},{"location":"Chapter_02/02_nicola/#to-do","title":"To Do\u00b6","text":""},{"location":"Chapter_02/02_nicola/#biologia","title":"Biologia\u00b6","text":"<p>To do.</p>"},{"location":"Chapter_02/02_nicola/#molecolare","title":"Molecolare\u00b6","text":""},{"location":"Chapter_02/test_0/","title":"Test 0","text":"<p>This is my customization:</p> <p>\\begin{equation} C_L = \\frac{L}{\\bar{q}_\\infty S } \\end{equation}</p> In\u00a0[4]: Copied! <pre>this_folder = eval('pwd')\npath(path,[this_folder])\n</pre> this_folder = eval('pwd') path(path,[this_folder]) Out[4]: <pre>this_folder = 'F:\\agodemar\\Flight_Dynamics_Book_Companion\\docs\\Chapter_02'</pre> In\u00a0[5]: Copied! <pre>% execute a script in the current folder\nmyscript\n</pre> % execute a script in the current folder myscript <pre>Hello from myfunc!\n</pre> In\u00a0[6]: Copied! <pre>x = linspace(0,2*pi,50);\ny = sin(x);\n\nfigure(1)\nplot(x,y)\nxlabel(\" $x$ (m)\")\n</pre> x = linspace(0,2*pi,50); y = sin(x);  figure(1) plot(x,y) xlabel(\" $x$ (m)\") Out[6]:"},{"location":"Chapter_02/test_0/#this-is-a-test","title":"This is a test\u00b6","text":"<p>This is a text</p>"},{"location":"Chapter_02/test_0/#this-is-another-text-cell","title":"This is another text cell\u00b6","text":"<p>Bla bla</p>"},{"location":"Chapter_03/00_static_stability_control/","title":"Aircraft static stability and control","text":"<p>TBD</p>"},{"location":"Chapter_04/00_dynamics/","title":"Aircraft dynamics","text":"<p>TBD</p>"},{"location":"Chapter_05/00_linearized_dynamics/","title":"Aircraft linearized dynamics","text":"<p>TBD</p>"},{"location":"Chapter_06/00_miscellanea/","title":"Miscellanea","text":"<p>TBD</p>"},{"location":"Chapter_06/00_miscellanea/#example-of-flow-chart","title":"Example of Flow Chart","text":"<pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre>"},{"location":"Chapter_06/00_miscellanea/#example-of-state-diagram","title":"Example of State Diagram","text":"<pre><code>stateDiagram-v2\n  state fork_state &lt;&lt;fork&gt;&gt;\n    [*] --&gt; fork_state\n    fork_state --&gt; State2\n    fork_state --&gt; State3\n\n    state join_state &lt;&lt;join&gt;&gt;\n    State2 --&gt; join_state\n    State3 --&gt; join_state\n    join_state --&gt; State4\n    State4 --&gt; [*]</code></pre>"},{"location":"Chapter_06/00_miscellanea/#example-of-state-diagram_1","title":"Example of State Diagram","text":"<p>See: mermaid.js.org</p> <pre><code>mindmap\n  root((mindmap))\n    Origins\n      Long history\n      ::icon(fa fa-book)\n      Popularisation\n        British popular psychology author Tony Buzan\n    Research\n      On effectiveness&lt;br/&gt;and features\n      On Automatic creation\n        Uses\n            Creative techniques\n            Strategic planning\n            Argument mapping\n    Tools\n      Pen and paper\n      Mermaid</code></pre>"},{"location":"Chapter_06/00_miscellanea/#example-of-latex-formulas","title":"Example of LaTeX formulas","text":"<p>Inline math: \\( E = mc^2 \\), or \\(L=q_\\infty S C_L\\,\\).</p> <p>Display, unnumbered:</p> \\[ E = mc^2 \\] <p>Display, numbered:</p> \\[\\begin{equation} \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} \\end{equation}\\] <p>The homomorphism \\(f\\) is injective if and only if its kernel is only the singleton set \\(e_G\\), because otherwise \\(\\exists a,b\\in G\\) with \\(a\\neq b\\) such that \\(f(a)=f(b)\\).</p>"}]}